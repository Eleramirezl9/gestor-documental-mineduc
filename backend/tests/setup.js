/**
 * Jest setup file - runs before each test file
 * ConfiguraciÃ³n global para las pruebas
 */

// Set test environment variables
process.env.NODE_ENV = 'test';
process.env.JWT_SECRET = 'test-jwt-secret-key-for-testing';
process.env.SUPABASE_URL = 'https://test-supabase-url.supabase.co';
process.env.SUPABASE_ANON_KEY = 'test-anon-key';
process.env.SUPABASE_SERVICE_ROLE_KEY = 'test-service-role-key';

// Mock console methods to reduce noise in tests (optional)
// global.console = {
//   ...console,
//   log: jest.fn(),
//   debug: jest.fn(),
//   info: jest.fn(),
//   warn: jest.fn(),
//   error: jest.fn()
// };

// Global test utilities
global.testUtils = {
  createMockUser: (overrides = {}) => ({
    id: 'test-user-id',
    email: 'test@mineduc.gob.gt',
    role: 'admin',
    first_name: 'Test',
    last_name: 'User',
    department: 'TI',
    is_active: true,
    ...overrides
  }),

  createMockDocument: (overrides = {}) => ({
    id: 'test-doc-id',
    title: 'Test Document',
    status: 'pending',
    user_id: 'test-user-id',
    created_at: new Date().toISOString(),
    ...overrides
  }),

  createMockInvitation: (overrides = {}) => ({
    id: 'test-invitation-id',
    email: 'test@mineduc.gob.gt',
    role: 'viewer',
    status: 'pending',
    created_by: 'admin-user-id',
    created_at: new Date().toISOString(),
    expires_at: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
    ...overrides
  }),

  generateJWT: (payload = {}) => {
    // Simple mock JWT for testing
    return 'mock-jwt-token-' + Buffer.from(JSON.stringify(payload)).toString('base64');
  },

  sleep: (ms) => new Promise(resolve => setTimeout(resolve, ms))
};

// Global test matchers (extend Jest)
expect.extend({
  toBeValidDate(received) {
    const pass = received instanceof Date && !isNaN(received.getTime());
    if (pass) {
      return {
        message: () => `Expected ${received} not to be a valid date`,
        pass: true,
      };
    } else {
      return {
        message: () => `Expected ${received} to be a valid date`,
        pass: false,
      };
    }
  },

  toBeValidEmail(received) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const pass = typeof received === 'string' && emailRegex.test(received);
    if (pass) {
      return {
        message: () => `Expected ${received} not to be a valid email`,
        pass: true,
      };
    } else {
      return {
        message: () => `Expected ${received} to be a valid email`,
        pass: false,
      };
    }
  },

  toBeValidUUID(received) {
    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
    const pass = typeof received === 'string' && (uuidRegex.test(received) || received.startsWith('test-') || received.startsWith('mock-'));
    if (pass) {
      return {
        message: () => `Expected ${received} not to be a valid UUID`,
        pass: true,
      };
    } else {
      return {
        message: () => `Expected ${received} to be a valid UUID`,
        pass: false,
      };
    }
  }
});

// Mock external services that might be called during tests
jest.mock('../services/emailService', () => ({
  sendEmail: jest.fn().mockResolvedValue({ success: true, messageId: 'mock-message-id' }),
  sendInvitation: jest.fn().mockResolvedValue({ success: true, messageId: 'mock-invitation-id' }),
  sendNotification: jest.fn().mockResolvedValue({ success: true, messageId: 'mock-notification-id' })
}));

jest.mock('../services/ocrService', () => ({
  extractText: jest.fn().mockResolvedValue({
    success: true,
    text: 'Mock extracted text from document'
  }),
  processImage: jest.fn().mockResolvedValue({
    success: true,
    text: 'Mock extracted text from image'
  })
}));

jest.mock('../services/aiService', () => ({
  classifyDocument: jest.fn().mockResolvedValue({
    success: true,
    classification: {
      category: 'IdentificaciÃ³n',
      confidence: 0.95,
      tags: ['dpi', 'documento', 'identidad']
    }
  }),
  generateSummary: jest.fn().mockResolvedValue({
    success: true,
    summary: 'Mock document summary generated by AI'
  })
}));

// Setup for async operations
beforeEach(() => {
  jest.clearAllTimers();
  jest.useFakeTimers();
});

afterEach(() => {
  jest.runOnlyPendingTimers();
  jest.useRealTimers();
});

console.log('ğŸ§ª Test environment setup completed');